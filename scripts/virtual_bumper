#!/usr/bin/env python

from __future__ import absolute_import, division, print_function

from threading import RLock
from timeit import default_timer as timer

import numpy as np
from scipy.spatial import KDTree

import rospy
from std_msgs.msg import ColorRGBA
from ros_numpy import msgify, numpify
from sensor_msgs.msg import PointCloud2
from geometry_msgs.msg import Twist, Point
from tf2_ros import Buffer, TransformListener
from visualization_msgs.msg import Marker, MarkerArray
from tf2_sensor_msgs.tf2_sensor_msgs import do_transform_cloud


class VirtualBumper(object):
    def __init__(self):
        self.robot_width = rospy.get_param("~robot_width", 0.6)
        self.robot_length = rospy.get_param("~robot_length", 0.8)
        self.robot_frame = rospy.get_param("~robot_frame", "base_link")
        self.clearance_box = np.array(rospy.get_param("~clearance_box", [[-0.6, 0.6], [-0.5, 0.5], [ 0.0, 0.8]]))
        self.cloud_max_delay = rospy.get_param("~cloud_max_delay", 0.8)
        self.min_points_obstacle = rospy.get_param("~min_points_obstacle", 20)
        self.centroid_radius_threshold = rospy.get_param("~centroid_radius_threshold", 0.35)
        self.debug = rospy.get_param("~debug", False)

        self.cloud = None
        self.cloud_lock = RLock()

        self.infeasible_directions_lock = RLock()
        self.infeasible_directions = dict(front=False, back=False, left=False, right=False)

        self.tf_buffer = Buffer()
        self.tf_listener = TransformListener(self.tf_buffer)

        self.cmd_sub = rospy.Subscriber("input_cmd_vel", Twist, self.receive_cmd_cb, queue_size=1, buff_size=40)
        self.cloud_sub = rospy.Subscriber("input_cloud", PointCloud2, self.receive_cloud_cb, queue_size=1, buff_size=2621473)

        self.cmd_pub = rospy.Publisher("output_cmd_vel", Twist, queue_size=1)

        if self.debug:
            self.cloud_pub = rospy.Publisher("obstacle_cloud", PointCloud2, queue_size=1)
            self.centroid_pub = rospy.Publisher("obstacle_centroids", MarkerArray, queue_size=1)

    def receive_cloud_cb(self, msg: PointCloud2):
        assert isinstance(msg, PointCloud2)

        # Discard cloud if delay is too high.
        time_delay = msg_delay(msg)
        if time_delay > self.cloud_max_delay:
            rospy.logdebug(f"Discarding cloud with delay: {time_delay:.3f} s.")
            return

        rospy.logdebug(f"Received cloud with delay: {time_delay:.3f} s.")

        # Make sure the cloud is in the robot frame.
        if msg.header.frame_id != self.robot_frame:
            msg = self._transform_cloud(msg)

        # Convert to numpy array.
        cloud = numpify(msg).ravel()

        # Filter cloud and compute infeasible directions.
        if cloud is not None:
            cloud = self._filter_cloud(cloud)
            self.check_clearance(cloud)
        else:
            rospy.logwarn("Received empty cloud.")
            return

        rospy.logdebug(f"Cloud processing time: {msg_delay(msg):.3f} s.")

    def receive_cmd_cb(self, msg: Twist):
        assert isinstance(msg, Twist)
        time_start = rospy.Time.now()

        if is_robot_moving(msg):
            with self.infeasible_directions_lock:
                if self.infeasible_directions['front'] and msg.linear.x > 0:
                    msg.linear.x = 0
                    rospy.logwarn("Blocked by obstacle in front.")
                if self.infeasible_directions['back'] and msg.linear.x < 0:
                    msg.linear.x = 0
                    rospy.logwarn("Blocked by obstacle in back.")
                if self.infeasible_directions['left'] and msg.angular.z > 0:
                    msg.angular.z = 0
                    rospy.logwarn("Blocked by obstacle on left.")
                if self.infeasible_directions['right'] and msg.angular.z < 0:
                    msg.angular.z = 0
                    rospy.logwarn("Blocked by obstacle on right")

            self.cmd_pub.publish(msg)

            rospy.logdebug(f"Computational time of the Receive CMD callback: {(rospy.Time.now() - time_start).to_sec()}")

    def check_clearance(self, cloud: np.ndarray) -> None:
        obstacle_cloud = self._create_obstacle_cloud(cloud)

        centroids = self._calculate_centroids(obstacle_cloud)
        with self.infeasible_directions_lock:
            self._update_infeasible_directions(centroids)

        if self.debug:
            self.publish_centroids(centroids)
            self.publish_obstacle_cloud(obstacle_cloud)

    def _transform_cloud(self, msg: PointCloud2) -> PointCloud2:
        transform = self.tf_buffer.lookup_transform(self.robot_frame, msg.header.frame_id, rospy.Time(0))
        msg_out = do_transform_cloud(msg, transform)
        msg_out.header.stamp = msg.header.stamp
        return msg_out

    def _filter_cloud(self, cloud: np.ndarray) -> np.ndarray:
        # Filter NaN values.
        valid_indices = ~np.isnan(cloud['x']) & ~np.isnan(cloud['y']) & ~np.isnan(cloud['z'])
        cloud = cloud[valid_indices]

        # Filter points inside robot.
        mask = ~((np.abs(cloud['x']) < self.robot_length/2) & (np.abs(cloud['y']) < self.robot_width/2))
        filtered_cloud = cloud[mask]
        return filtered_cloud

    def _create_obstacle_cloud(self, cloud: np.ndarray) -> np.ndarray:
        obstacles = np.ones(cloud.shape, dtype=bool)
        for i, f in enumerate(('x', 'y', 'z')):
            obstacles = obstacles & ((cloud[f] >= self.clearance_box[i, 0]) & (cloud[f] <= self.clearance_box[i, 1]))

        obstacle_cloud = cloud[obstacles]
        return obstacle_cloud

    def _update_infeasible_directions(self, centroids: list) -> None:
        self.infeasible_directions = dict(front=False, back=False, left=False, right=False)
        for centroid in centroids:
            x, y, _ = centroid
            if x >= self.robot_length / 2:  # Front section
                self.infeasible_directions['front'] = True
                if y > self.robot_width / 2:
                    self.infeasible_directions['left'] = True
                elif y < -self.robot_width / 2:
                    self.infeasible_directions['right'] = True
            elif x <= -self.robot_length / 2:  # Back section
                self.infeasible_directions['back'] = True
                if y > self.robot_width / 2:
                    self.infeasible_directions['left'] = True
                elif y < -self.robot_width / 2:
                    self.infeasible_directions['right'] = True
            else:  # Middle section
                if y > self.robot_width / 2:
                    self.infeasible_directions['left'] = True
                elif y < -self.robot_width / 2:
                    self.infeasible_directions['right'] = True

    def _calculate_centroids(self, cloud: np.ndarray) -> list:
        centroids = []
        threshold = 0.35
        points = np.vstack((cloud['x'], cloud['y'], cloud['z'])).T

        kdtree = KDTree(points)
        visited = np.zeros(len(points), dtype=bool)

        for idx in range(len(points)):
            if visited[idx]:
                continue

            # Find all points within the threshold distance of the current point
            indices = kdtree.query_ball_point(points[idx], threshold)

            if len(indices) > self.min_points_obstacle:
                current_cluster = points[indices]
                centroid = np.mean(current_cluster, axis=0)
                centroids.append(centroid)

                visited[indices] = True

        return centroids

    def publish_centroids(self, centroids: list) -> None:
        time_start = rospy.Time.now()
        marker_array = MarkerArray()
        for i, centroid in enumerate(centroids):
            marker = Marker()
            marker.header.frame_id = self.robot_frame
            marker.header.stamp = rospy.Time.now()
            marker.ns = "centroids"
            marker.id = i
            marker.type = Marker.SPHERE
            marker.action = Marker.ADD
            marker.pose.position = Point(*centroid)
            marker.pose.orientation.w = 1.0
            marker.scale.x = 0.1
            marker.scale.y = 0.1
            marker.scale.z = 0.1
            marker.color = ColorRGBA(0, 0, 1, 1)
            marker.lifetime = rospy.Duration(1.0)
            marker_array.markers.append(marker)
        self.centroid_pub.publish(marker_array)
        rospy.logdebug(f"Publishing centroids took {(rospy.Time.now() - time_start).to_sec()} s.")

    def publish_obstacle_cloud(self, cloud: np.ndarray) -> None:
        time_start = rospy.Time.now()
        cloud = msgify(PointCloud2, cloud)
        cloud.header.frame_id = self.robot_frame
        cloud.header.stamp = rospy.Time.now()
        self.cloud_pub.publish(cloud)
        rospy.logdebug(f"Publishing obstacle cloud took {(rospy.Time.now() - time_start).to_sec()} s.")


def msg_delay(msg):
    return (rospy.Time.now() - msg.header.stamp).to_sec()

def is_robot_moving(msg):
    return msg.linear.x != 0 or msg.angular.z != 0

if __name__ == "__main__":
    rospy.init_node("virtual_bumper", log_level=rospy.DEBUG)
    node = VirtualBumper()
    rospy.spin()
